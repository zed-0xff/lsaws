#!/usr/bin/env ruby
require 'tabulo'
require 'optparse'
require 'json'
require 'yaml'
require 'aws-sdk-core'

require_relative 'lib/lsaws/utils'

class Lsaws
  SUPPORTED_FORMATS = %w'table tabulo yaml json json-stream text'.sort
  DEFAULT_FORMAT    = :table

  def initialize argv
    @options = {
      format: DEFAULT_FORMAT,
      header: true,
      filters: {},
      only_cols: [],
      max_results: nil,
    }
    @commands = option_parser.parse!(argv)
    if @options[:all]
      raise "Unsupported arguments combination" if @commands.size != 1
      @commands << :all
    end
    @commands << :list if @options[:list]
  end

  def option_parser
    @option_parser ||=
      OptionParser.new do |opt|
        opt.banner = "Usage: lsaws [options] <sdk> [entity_type]"

        opt.on('-o', '--output FMT', SUPPORTED_FORMATS, "Format: #{SUPPORTED_FORMATS.join('/')}") do |f|
          @options[:format] = f.to_sym
        end
        opt.on('--tags', 'Show tags') { @options[:show_tags] = true }
        opt.on('-v', '--verbose', 'Verbose output') { @options[:verbose] = true }
        opt.on('--no-header', 'Suppress header') { @options[:header] = false }
        opt.on('-f', '--filter K=V', 'Add filter') { |o| @options[:filters].merge!(Hash[*o.split("=",2)]) }
        opt.on('--only C', 'Show only specified column(s)') { |o| @options[:only_cols] << o }
        opt.on('--max-results N', Integer, 'Fetch only specified number of results') { |o| @options[:max_results] = o }
        opt.on('--debug') { @options[:debug] = true }

        opt.separator ""
        opt.on('-L', '--list', 'List SDKs or entity types') { @options[:list] = true }
        opt.on('-A', '--all', 'List all entity types within SDK') { @options[:all] = true }
      end
  end

  SUPPORTED_ENTITIES = YAML::load_file(File.expand_path(__FILE__) + ".yml")

  def _prepare_entities(sdk, type)
    edef = SUPPORTED_ENTITIES.dig(sdk, type)
    if edef.is_a?(String)
      type = edef
      edef = SUPPORTED_ENTITIES[sdk][type] # should exist
      raise "unknown entity type: #{type}" unless edef
    end
    edef ||= {}
    require(edef['require'] || "aws-sdk-#{sdk}")

    params = edef['default_params'] || {}
    if @options[:filters].any?
      params[:filters] = @options[:filters].map{ |k,v| {name: k, values: [v]} }
    else
      params[:filters] = [edef["default_filter"]] if edef["default_filter"]
    end
    if @options[:max_results]
      params[:max_results] = @options[:max_results]
    end

    client_class = edef['client_class'] || guess_client_class(sdk)
    client = Kernel.const_get(client_class).new
    method_name = edef['method'] || (client.respond_to?("describe_#{type}") ? "describe_#{type}" : "list_#{type}")
    unless client.respond_to?(method_name)
      if type == "default"
        STDERR.puts "[!] no default entity type set for #{sdk.inspect} SDK"
      else
        STDERR.puts "[!] #{sdk.inspect} SDK does not have #{type.inspect} entity type"
      end
      puts "Known entity types are:"
      list_entity_types(sdk)
      exit 1
    end
    results = client.send(method_name, params)

    pp results if @options[:debug]

    if !edef["result_keys"] && results.any?
      r = results.first
      r = r.last if r.is_a?(Array)
      if r.respond_to?(type)
        edef["result_keys"] = [type]
      else
        edef["result_keys"] = [(r.members - [:next_token]).first]
      end
    end
    edef["result_keys"].each do |key|
      if results.is_a?(Array)
        results = results.map(&key.to_sym).flatten
      else
        results = results.send(key)
      end
    end

    results ||= []

#    if !edef["cols"] && results.any?
#      if results.first.respond_to?(:members)
#        edef["cols"] = results.first.members[0,4]
#      else
#        # sqs
#        edef["cols"] = [{ value: Proc.new{ |entity| entity } }]
#      end
#    end
    col_defs = {}
    Array(edef["cols"]).each do |r|
      case r
      when String, Symbol
        col_defs[r] = Proc.new{ |entity| entity.send(r) }
      when Hash
        col_defs.merge!(r)
      else
        raise "unexpected #{r.inspect}"
      end
    end
    col_defs["tags"] = _convert_tags_proc if @options[:show_tags]
    if @options[:only_cols].any?
      col_defs.delete_if{ |k,v| !@options[:only_cols].include?(k.to_s) }
    end
    if results.any? && !results.first.respond_to?(:name)
      results.first.class.class_eval do
        def name
          tags.find { |tag| tag.key == "Name" }&.value
        end
      end
    end

    if block_given?
      results.map do |entity|
        yield entity, col_defs
      end
    else
      [results, col_defs]
    end
  end

  def entities2records sdk, type
    rows, cols = _prepare_entities(sdk, type)
    if rows.is_a?(Array) && rows[0].is_a?(String)
      # sqs
      cols = { value: Proc.new{ |entity| entity } }
    elsif rows.respond_to?(:members)
      rows = [rows]
    end
    [rows, cols]
  end

  def entities2hashes sdk, type
    _prepare_entities(sdk, type) do |entity, _col_defs|
      case entity
      when String
        { value: entity }
      else
        entity.to_h
      end
      #Hash[col_defs.keys.map(&:to_s).zip col_defs.values.map{ |p| p.call(entity) }]
    end
  end

  def _convert_tags_proc
    case @options[:format]
    when :table, :text
      Proc.new{ |entity| entity.tags.map{ |tag| "#{tag.key}=#{tag.value}" }.join(", ") }
    else
      Proc.new{ |entity| Hash[*entity.tags.map{ |tag| [tag.key, tag.value] }.flatten] }
    end
  end

  def get_sdks
    r = []
    Gem.path.each do |p|
      next unless Dir.exist?(p)
      r.append(*Dir[File.join(p, "gems/aws-sdk-*")].map do |gem_dir|
        a = File.basename(gem_dir).split('-')
        a.size == 4 ? a[2] : nil
      end)
    end
    r.compact.uniq.sort - ['core']
  end

  def list_sdks
    _list_array get_sdks
  end

  def _list_array a
    case @options[:format]
    when :json
      puts a.to_json
    when :yaml
      puts a.to_yaml
    else
      puts a.join("\n")
    end
  end

  def guess_client_class sdk
    c = Aws.constants.find{ |x| x.to_s.downcase == sdk }
    "Aws::#{c}::Client"
  end

  def _get_method_rdoc data, method
    pos = data =~ /^\s+def\s+#{method}\s*\(/
    return nil unless pos
    chunk = ""
    bs = 4096
    while !chunk["\n\n"]
      chunk = data[pos-bs..pos]
      bs*=2
    end
    chunk[chunk.rindex("\n\n")+2..-1]
  end

  def get_entity_types sdk
    require "aws-sdk-#{sdk}"
    client_class = Kernel.const_get(guess_client_class(sdk))
    methods = client_class
      .instance_methods
      .find_all{ |m| m =~ /^(describe|list)_.+s$/ && m !~ /(status|access)$/ }

    return [] if methods.empty?

    data = File.read(client_class.instance_method(methods[0]).source_location[0])
    methods.delete_if do |m|
      rdoc = _get_method_rdoc(data, m)
      next unless rdoc
      required_params = rdoc.scan(/^\s+# @option params \[required, (.+?)\] :(\w+)/)
      required_params.any?
    end

    methods.map{ |m| m.to_s.sub(/^(describe|list)_/, '') }.sort
  end

  def list_entity_types sdk
    _list_array get_entity_types sdk
  end

  def _tabulo_guess_max_cols rows, cols
    max_width = TTY::Screen.width
    max_cols = rows[0].members.size
    return max_cols if max_cols < 4

    4.upto(max_cols) do |ncols|
      tbl = Tabulo::Table.new(rows[0,100], *rows[0].members[0,ncols], border: :modern)
      tbl.autosize_columns
      tbl_width = tbl.column_registry.values.map{ |c| c.padded_width + 1 }.inject(:+) + 1
      return ncols-1 if tbl_width >= max_width
    end
    max_cols
  end

  def process_command sdk, type = 'default'
    if sdk == :list
      return list_sdks
    elsif type == :list
      return list_entity_types(sdk)
    elsif type == :all
      get_entity_types(sdk).each do |etype|
        puts "#{etype}:"
        process_command(sdk, etype)
      end
      return
    end

    case @options[:format]
    when :text, :table
      rows, cols = entities2records(sdk, type)
      return unless rows.any?

      tbl = nil
      if cols.any?
        tbl = Tabulo::Table.new(rows, border: :modern) do |t|
          cols.each do |name, func|
            t.add_column name, &func
          end
        end
      else
        max_cols = _tabulo_guess_max_cols(rows, cols)
        tbl = Tabulo::Table.new(rows, *rows[0].members[0,max_cols], border: :modern)
      end
      puts tbl.pack
    when :json
      rows = entities2hashes(sdk, type)
      puts rows.to_json
    when :'json-stream'
      rows = entities2hashes(sdk, type)
      rows.each do |row|
        puts row.to_json
      end
    when :yaml
      rows = entities2hashes(sdk, type)
      rows.each{ |row| Utils._deep_transform_keys_in_object!(row, &:to_s) }
      puts rows.to_yaml
    else
      STDERR.puts "[!] unknown format: #{@options[:format]}"
      exit 1
    end
  rescue Aws::Errors::ServiceError => e
    STDERR.puts "[!] #{e}"
  end

  def run!
    case @commands.size
    when 1, 2
      process_command *@commands
    else
      puts option_parser.help
      return
    end
  end
end

if __FILE__ == $0
  Lsaws.new(ARGV).run!
end
